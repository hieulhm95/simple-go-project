version: '3.8'
services:
  mongo:
    container_name: mongo
    image: mongo:4.0 # use your production version
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME:
      MONGO_INITDB_ROOT_PASSWORD:
      MONGO_INITDB_DATABASE: sideproject
    ports:
      - 27017:27017

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  sideproject:
    container_name: sideproject
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    environment:
      MONGO_CONNECTION_STRING: mongodb://localhost:27017?directConnection=true
      MONGO_DB_NAME: sideproject
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: like_event
      APP_PORT: 3000
    command: ./main service
    depends_on:
      - mongo

  consumer:
    container_name: consumer
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: like_event
    command: ./main worker_kafka

  # Kafka
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - TOPICS="like_event"
    depends_on:
      - zookeeper